// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/ums/model"
)

func newUmsResource(db *gorm.DB) umsResource {
	_umsResource := umsResource{}

	_umsResource.umsResourceDo.UseDB(db)
	_umsResource.umsResourceDo.UseModel(&model.UmsResource{})

	tableName := _umsResource.umsResourceDo.TableName()
	_umsResource.ALL = field.NewField(tableName, "*")
	_umsResource.ID = field.NewInt64(tableName, "id")
	_umsResource.CreateTime = field.NewTime(tableName, "create_time")
	_umsResource.Name = field.NewString(tableName, "name")
	_umsResource.URL = field.NewString(tableName, "url")
	_umsResource.Description = field.NewString(tableName, "description")
	_umsResource.CategoryID = field.NewInt64(tableName, "category_id")

	_umsResource.fillFieldMap()

	return _umsResource
}

type umsResource struct {
	umsResourceDo

	ALL         field.Field
	ID          field.Int64
	CreateTime  field.Time
	Name        field.String
	URL         field.String
	Description field.String
	CategoryID  field.Int64

	fieldMap map[string]field.Expr
}

func (u umsResource) Table(newTableName string) *umsResource {
	u.umsResourceDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsResource) As(alias string) *umsResource {
	u.umsResourceDo.DO = *(u.umsResourceDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsResource) updateTableName(table string) *umsResource {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.Name = field.NewString(table, "name")
	u.URL = field.NewString(table, "url")
	u.Description = field.NewString(table, "description")
	u.CategoryID = field.NewInt64(table, "category_id")

	u.fillFieldMap()

	return u
}

func (u *umsResource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsResource) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["name"] = u.Name
	u.fieldMap["url"] = u.URL
	u.fieldMap["description"] = u.Description
	u.fieldMap["category_id"] = u.CategoryID
}

func (u umsResource) clone(db *gorm.DB) umsResource {
	u.umsResourceDo.ReplaceDB(db)
	return u
}

type umsResourceDo struct{ gen.DO }

//sql(SELECT ur.id id, ur.create_time, ur.`name`, ur.url, ur.description, ur.category_id
//FROM ums_admin_role_relation ar
//LEFT JOIN ums_role_resource_relation rr ON ar.role_id = rr.role_id
//LEFT JOIN ums_resource ur ON ur.id = rr.resource_id
//WHERE ar.admin_id = @adminId AND ur.id IS NOT NULL
//GROUP BY ur.id)
func (u umsResourceDo) GetResourceList(adminId int64) (result []*model.UmsResource, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["adminId"] = adminId
	generateSQL.WriteString("SELECT ur.id id, ur.create_time, ur.`name`, ur.url, ur.description, ur.category_id FROM ums_admin_role_relation ar LEFT JOIN ums_role_resource_relation rr ON ar.role_id = rr.role_id LEFT JOIN ums_resource ur ON ur.id = rr.resource_id WHERE ar.admin_id = @adminId AND ur.id IS NOT NULL GROUP BY ur.id ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params).Find(&result)
	} else {
		executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result)
	}
	err = executeSQL.Error
	return
}

//sql(SELECT r.id, r.create_time, r.`name`, r.url, r.description, r.category_id
//FROM ums_role_resource_relation rrr
//LEFT JOIN ums_resource r ON rrr.resource_id = r.id
//WHERE rrr.role_id = @roleId AND r.id IS NOT NULL
//GROUP BY r.id)
func (u umsResourceDo) GetResourceListByRoleId(roleId int64) (result []*model.UmsResource, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["roleId"] = roleId
	generateSQL.WriteString("SELECT r.id, r.create_time, r.`name`, r.url, r.description, r.category_id FROM ums_role_resource_relation rrr LEFT JOIN ums_resource r ON rrr.resource_id = r.id WHERE rrr.role_id = @roleId AND r.id IS NOT NULL GROUP BY r.id ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params).Find(&result)
	} else {
		executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result)
	}
	err = executeSQL.Error
	return
}

func (u umsResourceDo) Debug() *umsResourceDo {
	return u.withDO(u.DO.Debug())
}

func (u umsResourceDo) WithContext(ctx context.Context) *umsResourceDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsResourceDo) ReadDB() *umsResourceDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsResourceDo) WriteDB() *umsResourceDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsResourceDo) Clauses(conds ...clause.Expression) *umsResourceDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsResourceDo) Returning(value interface{}, columns ...string) *umsResourceDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsResourceDo) Not(conds ...gen.Condition) *umsResourceDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsResourceDo) Or(conds ...gen.Condition) *umsResourceDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsResourceDo) Select(conds ...field.Expr) *umsResourceDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsResourceDo) Where(conds ...gen.Condition) *umsResourceDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsResourceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *umsResourceDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u umsResourceDo) Order(conds ...field.Expr) *umsResourceDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsResourceDo) Distinct(cols ...field.Expr) *umsResourceDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsResourceDo) Omit(cols ...field.Expr) *umsResourceDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsResourceDo) Join(table schema.Tabler, on ...field.Expr) *umsResourceDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsResourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *umsResourceDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsResourceDo) RightJoin(table schema.Tabler, on ...field.Expr) *umsResourceDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsResourceDo) Group(cols ...field.Expr) *umsResourceDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsResourceDo) Having(conds ...gen.Condition) *umsResourceDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsResourceDo) Limit(limit int) *umsResourceDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsResourceDo) Offset(offset int) *umsResourceDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsResourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *umsResourceDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsResourceDo) Unscoped() *umsResourceDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsResourceDo) Create(values ...*model.UmsResource) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsResourceDo) CreateInBatches(values []*model.UmsResource, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsResourceDo) Save(values ...*model.UmsResource) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsResourceDo) First() (*model.UmsResource, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsResource), nil
	}
}

func (u umsResourceDo) Take() (*model.UmsResource, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsResource), nil
	}
}

func (u umsResourceDo) Last() (*model.UmsResource, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsResource), nil
	}
}

func (u umsResourceDo) Find() ([]*model.UmsResource, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsResource), err
}

func (u umsResourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsResource, err error) {
	buf := make([]*model.UmsResource, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsResourceDo) FindInBatches(result *[]*model.UmsResource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsResourceDo) Attrs(attrs ...field.AssignExpr) *umsResourceDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsResourceDo) Assign(attrs ...field.AssignExpr) *umsResourceDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsResourceDo) Joins(fields ...field.RelationField) *umsResourceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsResourceDo) Preload(fields ...field.RelationField) *umsResourceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsResourceDo) FirstOrInit() (*model.UmsResource, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsResource), nil
	}
}

func (u umsResourceDo) FirstOrCreate() (*model.UmsResource, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsResource), nil
	}
}

func (u umsResourceDo) FindByPage(offset int, limit int) (result []*model.UmsResource, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsResourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsResourceDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsResourceDo) Delete(models ...*model.UmsResource) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsResourceDo) withDO(do gen.Dao) *umsResourceDo {
	u.DO = *do.(*gen.DO)
	return u
}
