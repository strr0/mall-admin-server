// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/ums/model"
)

func newUmsRole(db *gorm.DB) umsRole {
	_umsRole := umsRole{}

	_umsRole.umsRoleDo.UseDB(db)
	_umsRole.umsRoleDo.UseModel(&model.UmsRole{})

	tableName := _umsRole.umsRoleDo.TableName()
	_umsRole.ALL = field.NewField(tableName, "*")
	_umsRole.ID = field.NewInt64(tableName, "id")
	_umsRole.Name = field.NewString(tableName, "name")
	_umsRole.Description = field.NewString(tableName, "description")
	_umsRole.AdminCount = field.NewInt32(tableName, "admin_count")
	_umsRole.CreateTime = field.NewTime(tableName, "create_time")
	_umsRole.Status = field.NewInt32(tableName, "status")
	_umsRole.Sort = field.NewInt32(tableName, "sort")

	_umsRole.fillFieldMap()

	return _umsRole
}

type umsRole struct {
	umsRoleDo

	ALL         field.Field
	ID          field.Int64
	Name        field.String
	Description field.String
	AdminCount  field.Int32
	CreateTime  field.Time
	Status      field.Int32
	Sort        field.Int32

	fieldMap map[string]field.Expr
}

func (u umsRole) Table(newTableName string) *umsRole {
	u.umsRoleDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsRole) As(alias string) *umsRole {
	u.umsRoleDo.DO = *(u.umsRoleDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsRole) updateTableName(table string) *umsRole {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.Name = field.NewString(table, "name")
	u.Description = field.NewString(table, "description")
	u.AdminCount = field.NewInt32(table, "admin_count")
	u.CreateTime = field.NewTime(table, "create_time")
	u.Status = field.NewInt32(table, "status")
	u.Sort = field.NewInt32(table, "sort")

	u.fillFieldMap()

	return u
}

func (u *umsRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsRole) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["description"] = u.Description
	u.fieldMap["admin_count"] = u.AdminCount
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["status"] = u.Status
	u.fieldMap["sort"] = u.Sort
}

func (u umsRole) clone(db *gorm.DB) umsRole {
	u.umsRoleDo.ReplaceDB(db)
	return u
}

type umsRoleDo struct{ gen.DO }

//sql(select r.* from ums_admin_role_relation ar left join ums_role r on ar.role_id = r.id where ar.admin_id = @adminId)
func (u umsRoleDo) GetRoleList(adminId int64) (result []*model.UmsRole, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["adminId"] = adminId
	generateSQL.WriteString("select r.* from ums_admin_role_relation ar left join ums_role r on ar.role_id = r.id where ar.admin_id = @adminId ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params).Find(&result)
	} else {
		executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result)
	}
	err = executeSQL.Error
	return
}

func (u umsRoleDo) Debug() *umsRoleDo {
	return u.withDO(u.DO.Debug())
}

func (u umsRoleDo) WithContext(ctx context.Context) *umsRoleDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsRoleDo) ReadDB() *umsRoleDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsRoleDo) WriteDB() *umsRoleDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsRoleDo) Clauses(conds ...clause.Expression) *umsRoleDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsRoleDo) Returning(value interface{}, columns ...string) *umsRoleDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsRoleDo) Not(conds ...gen.Condition) *umsRoleDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsRoleDo) Or(conds ...gen.Condition) *umsRoleDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsRoleDo) Select(conds ...field.Expr) *umsRoleDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsRoleDo) Where(conds ...gen.Condition) *umsRoleDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *umsRoleDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u umsRoleDo) Order(conds ...field.Expr) *umsRoleDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsRoleDo) Distinct(cols ...field.Expr) *umsRoleDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsRoleDo) Omit(cols ...field.Expr) *umsRoleDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsRoleDo) Join(table schema.Tabler, on ...field.Expr) *umsRoleDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *umsRoleDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *umsRoleDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsRoleDo) Group(cols ...field.Expr) *umsRoleDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsRoleDo) Having(conds ...gen.Condition) *umsRoleDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsRoleDo) Limit(limit int) *umsRoleDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsRoleDo) Offset(offset int) *umsRoleDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *umsRoleDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsRoleDo) Unscoped() *umsRoleDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsRoleDo) Create(values ...*model.UmsRole) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsRoleDo) CreateInBatches(values []*model.UmsRole, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsRoleDo) Save(values ...*model.UmsRole) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsRoleDo) First() (*model.UmsRole, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) Take() (*model.UmsRole, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) Last() (*model.UmsRole, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) Find() ([]*model.UmsRole, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsRole), err
}

func (u umsRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRole, err error) {
	buf := make([]*model.UmsRole, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsRoleDo) FindInBatches(result *[]*model.UmsRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsRoleDo) Attrs(attrs ...field.AssignExpr) *umsRoleDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsRoleDo) Assign(attrs ...field.AssignExpr) *umsRoleDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsRoleDo) Joins(fields ...field.RelationField) *umsRoleDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsRoleDo) Preload(fields ...field.RelationField) *umsRoleDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsRoleDo) FirstOrInit() (*model.UmsRole, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) FirstOrCreate() (*model.UmsRole, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRole), nil
	}
}

func (u umsRoleDo) FindByPage(offset int, limit int) (result []*model.UmsRole, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsRoleDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsRoleDo) Delete(models ...*model.UmsRole) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsRoleDo) withDO(do gen.Dao) *umsRoleDo {
	u.DO = *do.(*gen.DO)
	return u
}
