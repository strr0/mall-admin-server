// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q                       = new(Query)
	UmsAdmin                *umsAdmin
	UmsAdminRoleRelation    *umsAdminRoleRelation
	UmsMemberLevel          *umsMemberLevel
	UmsMenu                 *umsMenu
	UmsResource             *umsResource
	UmsResourceCategory     *umsResourceCategory
	UmsRole                 *umsRole
	UmsRoleMenuRelation     *umsRoleMenuRelation
	UmsRoleResourceRelation *umsRoleResourceRelation
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	UmsAdmin = &Q.UmsAdmin
	UmsAdminRoleRelation = &Q.UmsAdminRoleRelation
	UmsMemberLevel = &Q.UmsMemberLevel
	UmsMenu = &Q.UmsMenu
	UmsResource = &Q.UmsResource
	UmsResourceCategory = &Q.UmsResourceCategory
	UmsRole = &Q.UmsRole
	UmsRoleMenuRelation = &Q.UmsRoleMenuRelation
	UmsRoleResourceRelation = &Q.UmsRoleResourceRelation
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		UmsAdmin:                newUmsAdmin(db),
		UmsAdminRoleRelation:    newUmsAdminRoleRelation(db),
		UmsMemberLevel:          newUmsMemberLevel(db),
		UmsMenu:                 newUmsMenu(db),
		UmsResource:             newUmsResource(db),
		UmsResourceCategory:     newUmsResourceCategory(db),
		UmsRole:                 newUmsRole(db),
		UmsRoleMenuRelation:     newUmsRoleMenuRelation(db),
		UmsRoleResourceRelation: newUmsRoleResourceRelation(db),
	}
}

type Query struct {
	db *gorm.DB

	UmsAdmin                umsAdmin
	UmsAdminRoleRelation    umsAdminRoleRelation
	UmsMemberLevel          umsMemberLevel
	UmsMenu                 umsMenu
	UmsResource             umsResource
	UmsResourceCategory     umsResourceCategory
	UmsRole                 umsRole
	UmsRoleMenuRelation     umsRoleMenuRelation
	UmsRoleResourceRelation umsRoleResourceRelation
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		UmsAdmin:                q.UmsAdmin.clone(db),
		UmsAdminRoleRelation:    q.UmsAdminRoleRelation.clone(db),
		UmsMemberLevel:          q.UmsMemberLevel.clone(db),
		UmsMenu:                 q.UmsMenu.clone(db),
		UmsResource:             q.UmsResource.clone(db),
		UmsResourceCategory:     q.UmsResourceCategory.clone(db),
		UmsRole:                 q.UmsRole.clone(db),
		UmsRoleMenuRelation:     q.UmsRoleMenuRelation.clone(db),
		UmsRoleResourceRelation: q.UmsRoleResourceRelation.clone(db),
	}
}

type queryCtx struct {
	UmsAdmin                *umsAdminDo
	UmsAdminRoleRelation    *umsAdminRoleRelationDo
	UmsMemberLevel          *umsMemberLevelDo
	UmsMenu                 *umsMenuDo
	UmsResource             *umsResourceDo
	UmsResourceCategory     *umsResourceCategoryDo
	UmsRole                 *umsRoleDo
	UmsRoleMenuRelation     *umsRoleMenuRelationDo
	UmsRoleResourceRelation *umsRoleResourceRelationDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		UmsAdmin:                q.UmsAdmin.WithContext(ctx),
		UmsAdminRoleRelation:    q.UmsAdminRoleRelation.WithContext(ctx),
		UmsMemberLevel:          q.UmsMemberLevel.WithContext(ctx),
		UmsMenu:                 q.UmsMenu.WithContext(ctx),
		UmsResource:             q.UmsResource.WithContext(ctx),
		UmsResourceCategory:     q.UmsResourceCategory.WithContext(ctx),
		UmsRole:                 q.UmsRole.WithContext(ctx),
		UmsRoleMenuRelation:     q.UmsRoleMenuRelation.WithContext(ctx),
		UmsRoleResourceRelation: q.UmsRoleResourceRelation.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
