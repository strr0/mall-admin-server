// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/ums/model"
)

func newUmsAdmin(db *gorm.DB) umsAdmin {
	_umsAdmin := umsAdmin{}

	_umsAdmin.umsAdminDo.UseDB(db)
	_umsAdmin.umsAdminDo.UseModel(&model.UmsAdmin{})

	tableName := _umsAdmin.umsAdminDo.TableName()
	_umsAdmin.ALL = field.NewField(tableName, "*")
	_umsAdmin.ID = field.NewInt64(tableName, "id")
	_umsAdmin.Username = field.NewString(tableName, "username")
	_umsAdmin.Password = field.NewString(tableName, "password")
	_umsAdmin.Icon = field.NewString(tableName, "icon")
	_umsAdmin.Email = field.NewString(tableName, "email")
	_umsAdmin.NickName = field.NewString(tableName, "nick_name")
	_umsAdmin.Note = field.NewString(tableName, "note")
	_umsAdmin.CreateTime = field.NewTime(tableName, "create_time")
	_umsAdmin.LoginTime = field.NewTime(tableName, "login_time")
	_umsAdmin.Status = field.NewInt32(tableName, "status")

	_umsAdmin.fillFieldMap()

	return _umsAdmin
}

type umsAdmin struct {
	umsAdminDo

	ALL        field.Field
	ID         field.Int64
	Username   field.String
	Password   field.String
	Icon       field.String
	Email      field.String
	NickName   field.String
	Note       field.String
	CreateTime field.Time
	LoginTime  field.Time
	Status     field.Int32

	fieldMap map[string]field.Expr
}

func (u umsAdmin) Table(newTableName string) *umsAdmin {
	u.umsAdminDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsAdmin) As(alias string) *umsAdmin {
	u.umsAdminDo.DO = *(u.umsAdminDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsAdmin) updateTableName(table string) *umsAdmin {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.Password = field.NewString(table, "password")
	u.Icon = field.NewString(table, "icon")
	u.Email = field.NewString(table, "email")
	u.NickName = field.NewString(table, "nick_name")
	u.Note = field.NewString(table, "note")
	u.CreateTime = field.NewTime(table, "create_time")
	u.LoginTime = field.NewTime(table, "login_time")
	u.Status = field.NewInt32(table, "status")

	u.fillFieldMap()

	return u
}

func (u *umsAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsAdmin) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["password"] = u.Password
	u.fieldMap["icon"] = u.Icon
	u.fieldMap["email"] = u.Email
	u.fieldMap["nick_name"] = u.NickName
	u.fieldMap["note"] = u.Note
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["login_time"] = u.LoginTime
	u.fieldMap["status"] = u.Status
}

func (u umsAdmin) clone(db *gorm.DB) umsAdmin {
	u.umsAdminDo.ReplaceDB(db)
	return u
}

type umsAdminDo struct{ gen.DO }

func (u umsAdminDo) Debug() *umsAdminDo {
	return u.withDO(u.DO.Debug())
}

func (u umsAdminDo) WithContext(ctx context.Context) *umsAdminDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsAdminDo) ReadDB() *umsAdminDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsAdminDo) WriteDB() *umsAdminDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsAdminDo) Clauses(conds ...clause.Expression) *umsAdminDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsAdminDo) Returning(value interface{}, columns ...string) *umsAdminDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsAdminDo) Not(conds ...gen.Condition) *umsAdminDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsAdminDo) Or(conds ...gen.Condition) *umsAdminDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsAdminDo) Select(conds ...field.Expr) *umsAdminDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsAdminDo) Where(conds ...gen.Condition) *umsAdminDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsAdminDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *umsAdminDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u umsAdminDo) Order(conds ...field.Expr) *umsAdminDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsAdminDo) Distinct(cols ...field.Expr) *umsAdminDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsAdminDo) Omit(cols ...field.Expr) *umsAdminDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsAdminDo) Join(table schema.Tabler, on ...field.Expr) *umsAdminDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) *umsAdminDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) *umsAdminDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsAdminDo) Group(cols ...field.Expr) *umsAdminDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsAdminDo) Having(conds ...gen.Condition) *umsAdminDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsAdminDo) Limit(limit int) *umsAdminDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsAdminDo) Offset(offset int) *umsAdminDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *umsAdminDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsAdminDo) Unscoped() *umsAdminDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsAdminDo) Create(values ...*model.UmsAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsAdminDo) CreateInBatches(values []*model.UmsAdmin, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsAdminDo) Save(values ...*model.UmsAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsAdminDo) First() (*model.UmsAdmin, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) Take() (*model.UmsAdmin, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) Last() (*model.UmsAdmin, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) Find() ([]*model.UmsAdmin, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsAdmin), err
}

func (u umsAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdmin, err error) {
	buf := make([]*model.UmsAdmin, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsAdminDo) FindInBatches(result *[]*model.UmsAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsAdminDo) Attrs(attrs ...field.AssignExpr) *umsAdminDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsAdminDo) Assign(attrs ...field.AssignExpr) *umsAdminDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsAdminDo) Joins(fields ...field.RelationField) *umsAdminDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsAdminDo) Preload(fields ...field.RelationField) *umsAdminDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsAdminDo) FirstOrInit() (*model.UmsAdmin, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) FirstOrCreate() (*model.UmsAdmin, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdmin), nil
	}
}

func (u umsAdminDo) FindByPage(offset int, limit int) (result []*model.UmsAdmin, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsAdminDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsAdminDo) Delete(models ...*model.UmsAdmin) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsAdminDo) withDO(do gen.Dao) *umsAdminDo {
	u.DO = *do.(*gen.DO)
	return u
}
