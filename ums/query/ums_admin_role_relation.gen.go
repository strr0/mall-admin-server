// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/ums/model"
)

func newUmsAdminRoleRelation(db *gorm.DB) umsAdminRoleRelation {
	_umsAdminRoleRelation := umsAdminRoleRelation{}

	_umsAdminRoleRelation.umsAdminRoleRelationDo.UseDB(db)
	_umsAdminRoleRelation.umsAdminRoleRelationDo.UseModel(&model.UmsAdminRoleRelation{})

	tableName := _umsAdminRoleRelation.umsAdminRoleRelationDo.TableName()
	_umsAdminRoleRelation.ALL = field.NewField(tableName, "*")
	_umsAdminRoleRelation.ID = field.NewInt64(tableName, "id")
	_umsAdminRoleRelation.AdminID = field.NewInt64(tableName, "admin_id")
	_umsAdminRoleRelation.RoleID = field.NewInt64(tableName, "role_id")

	_umsAdminRoleRelation.fillFieldMap()

	return _umsAdminRoleRelation
}

type umsAdminRoleRelation struct {
	umsAdminRoleRelationDo

	ALL     field.Field
	ID      field.Int64
	AdminID field.Int64
	RoleID  field.Int64

	fieldMap map[string]field.Expr
}

func (u umsAdminRoleRelation) Table(newTableName string) *umsAdminRoleRelation {
	u.umsAdminRoleRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsAdminRoleRelation) As(alias string) *umsAdminRoleRelation {
	u.umsAdminRoleRelationDo.DO = *(u.umsAdminRoleRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsAdminRoleRelation) updateTableName(table string) *umsAdminRoleRelation {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.AdminID = field.NewInt64(table, "admin_id")
	u.RoleID = field.NewInt64(table, "role_id")

	u.fillFieldMap()

	return u
}

func (u *umsAdminRoleRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsAdminRoleRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["admin_id"] = u.AdminID
	u.fieldMap["role_id"] = u.RoleID
}

func (u umsAdminRoleRelation) clone(db *gorm.DB) umsAdminRoleRelation {
	u.umsAdminRoleRelationDo.ReplaceDB(db)
	return u
}

type umsAdminRoleRelationDo struct{ gen.DO }

func (u umsAdminRoleRelationDo) Debug() *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u umsAdminRoleRelationDo) WithContext(ctx context.Context) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsAdminRoleRelationDo) ReadDB() *umsAdminRoleRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsAdminRoleRelationDo) WriteDB() *umsAdminRoleRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsAdminRoleRelationDo) Clauses(conds ...clause.Expression) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsAdminRoleRelationDo) Returning(value interface{}, columns ...string) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsAdminRoleRelationDo) Not(conds ...gen.Condition) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsAdminRoleRelationDo) Or(conds ...gen.Condition) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsAdminRoleRelationDo) Select(conds ...field.Expr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsAdminRoleRelationDo) Where(conds ...gen.Condition) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsAdminRoleRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *umsAdminRoleRelationDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u umsAdminRoleRelationDo) Order(conds ...field.Expr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsAdminRoleRelationDo) Distinct(cols ...field.Expr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsAdminRoleRelationDo) Omit(cols ...field.Expr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsAdminRoleRelationDo) Join(table schema.Tabler, on ...field.Expr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsAdminRoleRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsAdminRoleRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsAdminRoleRelationDo) Group(cols ...field.Expr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsAdminRoleRelationDo) Having(conds ...gen.Condition) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsAdminRoleRelationDo) Limit(limit int) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsAdminRoleRelationDo) Offset(offset int) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsAdminRoleRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsAdminRoleRelationDo) Unscoped() *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsAdminRoleRelationDo) Create(values ...*model.UmsAdminRoleRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsAdminRoleRelationDo) CreateInBatches(values []*model.UmsAdminRoleRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsAdminRoleRelationDo) Save(values ...*model.UmsAdminRoleRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsAdminRoleRelationDo) First() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) Take() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) Last() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) Find() ([]*model.UmsAdminRoleRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsAdminRoleRelation), err
}

func (u umsAdminRoleRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsAdminRoleRelation, err error) {
	buf := make([]*model.UmsAdminRoleRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsAdminRoleRelationDo) FindInBatches(result *[]*model.UmsAdminRoleRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsAdminRoleRelationDo) Attrs(attrs ...field.AssignExpr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsAdminRoleRelationDo) Assign(attrs ...field.AssignExpr) *umsAdminRoleRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsAdminRoleRelationDo) Joins(fields ...field.RelationField) *umsAdminRoleRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsAdminRoleRelationDo) Preload(fields ...field.RelationField) *umsAdminRoleRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsAdminRoleRelationDo) FirstOrInit() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) FirstOrCreate() (*model.UmsAdminRoleRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsAdminRoleRelation), nil
	}
}

func (u umsAdminRoleRelationDo) FindByPage(offset int, limit int) (result []*model.UmsAdminRoleRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsAdminRoleRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsAdminRoleRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsAdminRoleRelationDo) Delete(models ...*model.UmsAdminRoleRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsAdminRoleRelationDo) withDO(do gen.Dao) *umsAdminRoleRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
