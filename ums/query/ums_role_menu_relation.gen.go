// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/ums/model"
)

func newUmsRoleMenuRelation(db *gorm.DB) umsRoleMenuRelation {
	_umsRoleMenuRelation := umsRoleMenuRelation{}

	_umsRoleMenuRelation.umsRoleMenuRelationDo.UseDB(db)
	_umsRoleMenuRelation.umsRoleMenuRelationDo.UseModel(&model.UmsRoleMenuRelation{})

	tableName := _umsRoleMenuRelation.umsRoleMenuRelationDo.TableName()
	_umsRoleMenuRelation.ALL = field.NewField(tableName, "*")
	_umsRoleMenuRelation.ID = field.NewInt64(tableName, "id")
	_umsRoleMenuRelation.RoleID = field.NewInt64(tableName, "role_id")
	_umsRoleMenuRelation.MenuID = field.NewInt64(tableName, "menu_id")

	_umsRoleMenuRelation.fillFieldMap()

	return _umsRoleMenuRelation
}

type umsRoleMenuRelation struct {
	umsRoleMenuRelationDo

	ALL    field.Field
	ID     field.Int64
	RoleID field.Int64
	MenuID field.Int64

	fieldMap map[string]field.Expr
}

func (u umsRoleMenuRelation) Table(newTableName string) *umsRoleMenuRelation {
	u.umsRoleMenuRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsRoleMenuRelation) As(alias string) *umsRoleMenuRelation {
	u.umsRoleMenuRelationDo.DO = *(u.umsRoleMenuRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsRoleMenuRelation) updateTableName(table string) *umsRoleMenuRelation {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.RoleID = field.NewInt64(table, "role_id")
	u.MenuID = field.NewInt64(table, "menu_id")

	u.fillFieldMap()

	return u
}

func (u *umsRoleMenuRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsRoleMenuRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["menu_id"] = u.MenuID
}

func (u umsRoleMenuRelation) clone(db *gorm.DB) umsRoleMenuRelation {
	u.umsRoleMenuRelationDo.ReplaceDB(db)
	return u
}

type umsRoleMenuRelationDo struct{ gen.DO }

func (u umsRoleMenuRelationDo) Debug() *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u umsRoleMenuRelationDo) WithContext(ctx context.Context) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsRoleMenuRelationDo) ReadDB() *umsRoleMenuRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsRoleMenuRelationDo) WriteDB() *umsRoleMenuRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsRoleMenuRelationDo) Clauses(conds ...clause.Expression) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsRoleMenuRelationDo) Returning(value interface{}, columns ...string) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsRoleMenuRelationDo) Not(conds ...gen.Condition) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsRoleMenuRelationDo) Or(conds ...gen.Condition) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsRoleMenuRelationDo) Select(conds ...field.Expr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsRoleMenuRelationDo) Where(conds ...gen.Condition) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsRoleMenuRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *umsRoleMenuRelationDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u umsRoleMenuRelationDo) Order(conds ...field.Expr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsRoleMenuRelationDo) Distinct(cols ...field.Expr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsRoleMenuRelationDo) Omit(cols ...field.Expr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsRoleMenuRelationDo) Join(table schema.Tabler, on ...field.Expr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsRoleMenuRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsRoleMenuRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsRoleMenuRelationDo) Group(cols ...field.Expr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsRoleMenuRelationDo) Having(conds ...gen.Condition) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsRoleMenuRelationDo) Limit(limit int) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsRoleMenuRelationDo) Offset(offset int) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsRoleMenuRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsRoleMenuRelationDo) Unscoped() *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsRoleMenuRelationDo) Create(values ...*model.UmsRoleMenuRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsRoleMenuRelationDo) CreateInBatches(values []*model.UmsRoleMenuRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsRoleMenuRelationDo) Save(values ...*model.UmsRoleMenuRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsRoleMenuRelationDo) First() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) Take() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) Last() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) Find() ([]*model.UmsRoleMenuRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsRoleMenuRelation), err
}

func (u umsRoleMenuRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsRoleMenuRelation, err error) {
	buf := make([]*model.UmsRoleMenuRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsRoleMenuRelationDo) FindInBatches(result *[]*model.UmsRoleMenuRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsRoleMenuRelationDo) Attrs(attrs ...field.AssignExpr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsRoleMenuRelationDo) Assign(attrs ...field.AssignExpr) *umsRoleMenuRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsRoleMenuRelationDo) Joins(fields ...field.RelationField) *umsRoleMenuRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsRoleMenuRelationDo) Preload(fields ...field.RelationField) *umsRoleMenuRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsRoleMenuRelationDo) FirstOrInit() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) FirstOrCreate() (*model.UmsRoleMenuRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsRoleMenuRelation), nil
	}
}

func (u umsRoleMenuRelationDo) FindByPage(offset int, limit int) (result []*model.UmsRoleMenuRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsRoleMenuRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsRoleMenuRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsRoleMenuRelationDo) Delete(models ...*model.UmsRoleMenuRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsRoleMenuRelationDo) withDO(do gen.Dao) *umsRoleMenuRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
