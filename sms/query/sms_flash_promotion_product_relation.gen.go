// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/sms/model"
	"mall-admin-server/sms/service/dto"
)

func newSmsFlashPromotionProductRelation(db *gorm.DB) smsFlashPromotionProductRelation {
	_smsFlashPromotionProductRelation := smsFlashPromotionProductRelation{}

	_smsFlashPromotionProductRelation.smsFlashPromotionProductRelationDo.UseDB(db)
	_smsFlashPromotionProductRelation.smsFlashPromotionProductRelationDo.UseModel(&model.SmsFlashPromotionProductRelation{})

	tableName := _smsFlashPromotionProductRelation.smsFlashPromotionProductRelationDo.TableName()
	_smsFlashPromotionProductRelation.ALL = field.NewField(tableName, "*")
	_smsFlashPromotionProductRelation.ID = field.NewInt64(tableName, "id")
	_smsFlashPromotionProductRelation.FlashPromotionID = field.NewInt64(tableName, "flash_promotion_id")
	_smsFlashPromotionProductRelation.FlashPromotionSessionID = field.NewInt64(tableName, "flash_promotion_session_id")
	_smsFlashPromotionProductRelation.ProductID = field.NewInt64(tableName, "product_id")
	_smsFlashPromotionProductRelation.FlashPromotionPrice = field.NewFloat64(tableName, "flash_promotion_price")
	_smsFlashPromotionProductRelation.FlashPromotionCount = field.NewInt32(tableName, "flash_promotion_count")
	_smsFlashPromotionProductRelation.FlashPromotionLimit = field.NewInt32(tableName, "flash_promotion_limit")
	_smsFlashPromotionProductRelation.Sort = field.NewInt32(tableName, "sort")

	_smsFlashPromotionProductRelation.fillFieldMap()

	return _smsFlashPromotionProductRelation
}

type smsFlashPromotionProductRelation struct {
	smsFlashPromotionProductRelationDo

	ALL                     field.Field
	ID                      field.Int64
	FlashPromotionID        field.Int64
	FlashPromotionSessionID field.Int64
	ProductID               field.Int64
	FlashPromotionPrice     field.Float64
	FlashPromotionCount     field.Int32
	FlashPromotionLimit     field.Int32
	Sort                    field.Int32

	fieldMap map[string]field.Expr
}

func (s smsFlashPromotionProductRelation) Table(newTableName string) *smsFlashPromotionProductRelation {
	s.smsFlashPromotionProductRelationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsFlashPromotionProductRelation) As(alias string) *smsFlashPromotionProductRelation {
	s.smsFlashPromotionProductRelationDo.DO = *(s.smsFlashPromotionProductRelationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsFlashPromotionProductRelation) updateTableName(table string) *smsFlashPromotionProductRelation {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewInt64(table, "id")
	s.FlashPromotionID = field.NewInt64(table, "flash_promotion_id")
	s.FlashPromotionSessionID = field.NewInt64(table, "flash_promotion_session_id")
	s.ProductID = field.NewInt64(table, "product_id")
	s.FlashPromotionPrice = field.NewFloat64(table, "flash_promotion_price")
	s.FlashPromotionCount = field.NewInt32(table, "flash_promotion_count")
	s.FlashPromotionLimit = field.NewInt32(table, "flash_promotion_limit")
	s.Sort = field.NewInt32(table, "sort")

	s.fillFieldMap()

	return s
}

func (s *smsFlashPromotionProductRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsFlashPromotionProductRelation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["flash_promotion_id"] = s.FlashPromotionID
	s.fieldMap["flash_promotion_session_id"] = s.FlashPromotionSessionID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["flash_promotion_price"] = s.FlashPromotionPrice
	s.fieldMap["flash_promotion_count"] = s.FlashPromotionCount
	s.fieldMap["flash_promotion_limit"] = s.FlashPromotionLimit
	s.fieldMap["sort"] = s.Sort
}

func (s smsFlashPromotionProductRelation) clone(db *gorm.DB) smsFlashPromotionProductRelation {
	s.smsFlashPromotionProductRelationDo.ReplaceDB(db)
	return s
}

type smsFlashPromotionProductRelationDo struct{ gen.DO }

//sql(SELECT COUNT(1) from (SELECT r.id, r.flash_promotion_price, r.flash_promotion_count, r.flash_promotion_limit,
//           r.flash_promotion_id, r.flash_promotion_session_id, r.product_id, r.sort,
//           p.`name` name, p.product_sn product_sn, p.price price, p.stock stock
//FROM sms_flash_promotion_product_relation r
//LEFT JOIN pms_product p ON r.product_id = p.id
//WHERE r.flash_promotion_id = @flashPromotionId AND r.flash_promotion_session_id = @flashPromotionSessionId
//ORDER BY r.sort DESC) t)
func (s smsFlashPromotionProductRelationDo) GetListCount(flashPromotionId int64, flashPromotionSessionId int64) (result int64, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["flashPromotionId"] = flashPromotionId
	params["flashPromotionSessionId"] = flashPromotionSessionId
	generateSQL.WriteString("SELECT COUNT(1) from (SELECT r.id, r.flash_promotion_price, r.flash_promotion_count, r.flash_promotion_limit, r.flash_promotion_id, r.flash_promotion_session_id, r.product_id, r.sort, p.`name` name, p.product_sn product_sn, p.price price, p.stock stock FROM sms_flash_promotion_product_relation r LEFT JOIN pms_product p ON r.product_id = p.id WHERE r.flash_promotion_id = @flashPromotionId AND r.flash_promotion_session_id = @flashPromotionSessionId ORDER BY r.sort DESC) t ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

//sql(SELECT r.id, r.flash_promotion_price, r.flash_promotion_count, r.flash_promotion_limit,
//           r.flash_promotion_id, r.flash_promotion_session_id, r.product_id, r.sort,
//           p.`name` name, p.product_sn product_sn, p.price price, p.stock stock
//FROM sms_flash_promotion_product_relation r
//LEFT JOIN pms_product p ON r.product_id = p.id
//WHERE r.flash_promotion_id = @flashPromotionId AND r.flash_promotion_session_id = @flashPromotionSessionId
//ORDER BY r.sort DESC OFFSET @offset LIMIT @limit)
func (s smsFlashPromotionProductRelationDo) GetListData(flashPromotionId int64, flashPromotionSessionId int64, offset int, limit int) (result []*dto.SmsFlashPromotionProductRelationDto, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["flashPromotionId"] = flashPromotionId
	params["flashPromotionSessionId"] = flashPromotionSessionId
	params["offset"] = offset
	params["limit"] = limit
	generateSQL.WriteString("SELECT r.id, r.flash_promotion_price, r.flash_promotion_count, r.flash_promotion_limit, r.flash_promotion_id, r.flash_promotion_session_id, r.product_id, r.sort, p.`name` name, p.product_sn product_sn, p.price price, p.stock stock FROM sms_flash_promotion_product_relation r LEFT JOIN pms_product p ON r.product_id = p.id WHERE r.flash_promotion_id = @flashPromotionId AND r.flash_promotion_session_id = @flashPromotionSessionId ORDER BY r.sort DESC OFFSET @offset LIMIT @limit ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params).Find(&result)
	} else {
		executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Find(&result)
	}
	err = executeSQL.Error
	return
}

func (s smsFlashPromotionProductRelationDo) Debug() *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Debug())
}

func (s smsFlashPromotionProductRelationDo) WithContext(ctx context.Context) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsFlashPromotionProductRelationDo) ReadDB() *smsFlashPromotionProductRelationDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsFlashPromotionProductRelationDo) WriteDB() *smsFlashPromotionProductRelationDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsFlashPromotionProductRelationDo) Clauses(conds ...clause.Expression) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsFlashPromotionProductRelationDo) Returning(value interface{}, columns ...string) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsFlashPromotionProductRelationDo) Not(conds ...gen.Condition) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsFlashPromotionProductRelationDo) Or(conds ...gen.Condition) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsFlashPromotionProductRelationDo) Select(conds ...field.Expr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsFlashPromotionProductRelationDo) Where(conds ...gen.Condition) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsFlashPromotionProductRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *smsFlashPromotionProductRelationDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s smsFlashPromotionProductRelationDo) Order(conds ...field.Expr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsFlashPromotionProductRelationDo) Distinct(cols ...field.Expr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsFlashPromotionProductRelationDo) Omit(cols ...field.Expr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsFlashPromotionProductRelationDo) Join(table schema.Tabler, on ...field.Expr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsFlashPromotionProductRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsFlashPromotionProductRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsFlashPromotionProductRelationDo) Group(cols ...field.Expr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsFlashPromotionProductRelationDo) Having(conds ...gen.Condition) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsFlashPromotionProductRelationDo) Limit(limit int) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsFlashPromotionProductRelationDo) Offset(offset int) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsFlashPromotionProductRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsFlashPromotionProductRelationDo) Unscoped() *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsFlashPromotionProductRelationDo) Create(values ...*model.SmsFlashPromotionProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsFlashPromotionProductRelationDo) CreateInBatches(values []*model.SmsFlashPromotionProductRelation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsFlashPromotionProductRelationDo) Save(values ...*model.SmsFlashPromotionProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsFlashPromotionProductRelationDo) First() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) Take() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) Last() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) Find() ([]*model.SmsFlashPromotionProductRelation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsFlashPromotionProductRelation), err
}

func (s smsFlashPromotionProductRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsFlashPromotionProductRelation, err error) {
	buf := make([]*model.SmsFlashPromotionProductRelation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsFlashPromotionProductRelationDo) FindInBatches(result *[]*model.SmsFlashPromotionProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsFlashPromotionProductRelationDo) Attrs(attrs ...field.AssignExpr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsFlashPromotionProductRelationDo) Assign(attrs ...field.AssignExpr) *smsFlashPromotionProductRelationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsFlashPromotionProductRelationDo) Joins(fields ...field.RelationField) *smsFlashPromotionProductRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsFlashPromotionProductRelationDo) Preload(fields ...field.RelationField) *smsFlashPromotionProductRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsFlashPromotionProductRelationDo) FirstOrInit() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) FirstOrCreate() (*model.SmsFlashPromotionProductRelation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsFlashPromotionProductRelation), nil
	}
}

func (s smsFlashPromotionProductRelationDo) FindByPage(offset int, limit int) (result []*model.SmsFlashPromotionProductRelation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsFlashPromotionProductRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsFlashPromotionProductRelationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsFlashPromotionProductRelationDo) Delete(models ...*model.SmsFlashPromotionProductRelation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsFlashPromotionProductRelationDo) withDO(do gen.Dao) *smsFlashPromotionProductRelationDo {
	s.DO = *do.(*gen.DO)
	return s
}
