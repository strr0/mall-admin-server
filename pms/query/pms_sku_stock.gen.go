// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/pms/model"
)

func newPmsSkuStock(db *gorm.DB) pmsSkuStock {
	_pmsSkuStock := pmsSkuStock{}

	_pmsSkuStock.pmsSkuStockDo.UseDB(db)
	_pmsSkuStock.pmsSkuStockDo.UseModel(&model.PmsSkuStock{})

	tableName := _pmsSkuStock.pmsSkuStockDo.TableName()
	_pmsSkuStock.ALL = field.NewField(tableName, "*")
	_pmsSkuStock.ID = field.NewInt64(tableName, "id")
	_pmsSkuStock.ProductID = field.NewInt64(tableName, "product_id")
	_pmsSkuStock.SkuCode = field.NewString(tableName, "sku_code")
	_pmsSkuStock.Price = field.NewFloat64(tableName, "price")
	_pmsSkuStock.Stock = field.NewInt32(tableName, "stock")
	_pmsSkuStock.LowStock = field.NewInt32(tableName, "low_stock")
	_pmsSkuStock.Pic = field.NewString(tableName, "pic")
	_pmsSkuStock.Sale = field.NewInt32(tableName, "sale")
	_pmsSkuStock.PromotionPrice = field.NewFloat64(tableName, "promotion_price")
	_pmsSkuStock.LockStock = field.NewInt32(tableName, "lock_stock")
	_pmsSkuStock.SpData = field.NewString(tableName, "sp_data")

	_pmsSkuStock.fillFieldMap()

	return _pmsSkuStock
}

type pmsSkuStock struct {
	pmsSkuStockDo

	ALL            field.Field
	ID             field.Int64
	ProductID      field.Int64
	SkuCode        field.String
	Price          field.Float64
	Stock          field.Int32
	LowStock       field.Int32
	Pic            field.String
	Sale           field.Int32
	PromotionPrice field.Float64
	LockStock      field.Int32
	SpData         field.String

	fieldMap map[string]field.Expr
}

func (p pmsSkuStock) Table(newTableName string) *pmsSkuStock {
	p.pmsSkuStockDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSkuStock) As(alias string) *pmsSkuStock {
	p.pmsSkuStockDo.DO = *(p.pmsSkuStockDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSkuStock) updateTableName(table string) *pmsSkuStock {
	p.ALL = field.NewField(table, "*")
	p.ID = field.NewInt64(table, "id")
	p.ProductID = field.NewInt64(table, "product_id")
	p.SkuCode = field.NewString(table, "sku_code")
	p.Price = field.NewFloat64(table, "price")
	p.Stock = field.NewInt32(table, "stock")
	p.LowStock = field.NewInt32(table, "low_stock")
	p.Pic = field.NewString(table, "pic")
	p.Sale = field.NewInt32(table, "sale")
	p.PromotionPrice = field.NewFloat64(table, "promotion_price")
	p.LockStock = field.NewInt32(table, "lock_stock")
	p.SpData = field.NewString(table, "sp_data")

	p.fillFieldMap()

	return p
}

func (p *pmsSkuStock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSkuStock) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["sku_code"] = p.SkuCode
	p.fieldMap["price"] = p.Price
	p.fieldMap["stock"] = p.Stock
	p.fieldMap["low_stock"] = p.LowStock
	p.fieldMap["pic"] = p.Pic
	p.fieldMap["sale"] = p.Sale
	p.fieldMap["promotion_price"] = p.PromotionPrice
	p.fieldMap["lock_stock"] = p.LockStock
	p.fieldMap["sp_data"] = p.SpData
}

func (p pmsSkuStock) clone(db *gorm.DB) pmsSkuStock {
	p.pmsSkuStockDo.ReplaceDB(db)
	return p
}

type pmsSkuStockDo struct{ gen.DO }

func (p pmsSkuStockDo) Debug() *pmsSkuStockDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSkuStockDo) WithContext(ctx context.Context) *pmsSkuStockDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSkuStockDo) ReadDB() *pmsSkuStockDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSkuStockDo) WriteDB() *pmsSkuStockDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSkuStockDo) Clauses(conds ...clause.Expression) *pmsSkuStockDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSkuStockDo) Returning(value interface{}, columns ...string) *pmsSkuStockDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSkuStockDo) Not(conds ...gen.Condition) *pmsSkuStockDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSkuStockDo) Or(conds ...gen.Condition) *pmsSkuStockDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSkuStockDo) Select(conds ...field.Expr) *pmsSkuStockDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSkuStockDo) Where(conds ...gen.Condition) *pmsSkuStockDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSkuStockDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pmsSkuStockDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pmsSkuStockDo) Order(conds ...field.Expr) *pmsSkuStockDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSkuStockDo) Distinct(cols ...field.Expr) *pmsSkuStockDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSkuStockDo) Omit(cols ...field.Expr) *pmsSkuStockDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSkuStockDo) Join(table schema.Tabler, on ...field.Expr) *pmsSkuStockDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSkuStockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pmsSkuStockDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSkuStockDo) RightJoin(table schema.Tabler, on ...field.Expr) *pmsSkuStockDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSkuStockDo) Group(cols ...field.Expr) *pmsSkuStockDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSkuStockDo) Having(conds ...gen.Condition) *pmsSkuStockDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSkuStockDo) Limit(limit int) *pmsSkuStockDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSkuStockDo) Offset(offset int) *pmsSkuStockDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSkuStockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pmsSkuStockDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSkuStockDo) Unscoped() *pmsSkuStockDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSkuStockDo) Create(values ...*model.PmsSkuStock) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSkuStockDo) CreateInBatches(values []*model.PmsSkuStock, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSkuStockDo) Save(values ...*model.PmsSkuStock) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSkuStockDo) First() (*model.PmsSkuStock, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuStock), nil
	}
}

func (p pmsSkuStockDo) Take() (*model.PmsSkuStock, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuStock), nil
	}
}

func (p pmsSkuStockDo) Last() (*model.PmsSkuStock, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuStock), nil
	}
}

func (p pmsSkuStockDo) Find() ([]*model.PmsSkuStock, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSkuStock), err
}

func (p pmsSkuStockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSkuStock, err error) {
	buf := make([]*model.PmsSkuStock, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSkuStockDo) FindInBatches(result *[]*model.PmsSkuStock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSkuStockDo) Attrs(attrs ...field.AssignExpr) *pmsSkuStockDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSkuStockDo) Assign(attrs ...field.AssignExpr) *pmsSkuStockDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSkuStockDo) Joins(fields ...field.RelationField) *pmsSkuStockDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSkuStockDo) Preload(fields ...field.RelationField) *pmsSkuStockDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSkuStockDo) FirstOrInit() (*model.PmsSkuStock, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuStock), nil
	}
}

func (p pmsSkuStockDo) FirstOrCreate() (*model.PmsSkuStock, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuStock), nil
	}
}

func (p pmsSkuStockDo) FindByPage(offset int, limit int) (result []*model.PmsSkuStock, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSkuStockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSkuStockDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSkuStockDo) Delete(models ...*model.PmsSkuStock) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSkuStockDo) withDO(do gen.Dao) *pmsSkuStockDo {
	p.DO = *do.(*gen.DO)
	return p
}
