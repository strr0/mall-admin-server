// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/pms/model"
)

func newPmsProductLadder(db *gorm.DB) pmsProductLadder {
	_pmsProductLadder := pmsProductLadder{}

	_pmsProductLadder.pmsProductLadderDo.UseDB(db)
	_pmsProductLadder.pmsProductLadderDo.UseModel(&model.PmsProductLadder{})

	tableName := _pmsProductLadder.pmsProductLadderDo.TableName()
	_pmsProductLadder.ALL = field.NewField(tableName, "*")
	_pmsProductLadder.ID = field.NewInt64(tableName, "id")
	_pmsProductLadder.ProductID = field.NewInt64(tableName, "product_id")
	_pmsProductLadder.Count_ = field.NewInt32(tableName, "count")
	_pmsProductLadder.Discount = field.NewFloat64(tableName, "discount")
	_pmsProductLadder.Price = field.NewFloat64(tableName, "price")

	_pmsProductLadder.fillFieldMap()

	return _pmsProductLadder
}

type pmsProductLadder struct {
	pmsProductLadderDo

	ALL       field.Field
	ID        field.Int64
	ProductID field.Int64
	Count_    field.Int32
	Discount  field.Float64
	Price     field.Float64

	fieldMap map[string]field.Expr
}

func (p pmsProductLadder) Table(newTableName string) *pmsProductLadder {
	p.pmsProductLadderDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductLadder) As(alias string) *pmsProductLadder {
	p.pmsProductLadderDo.DO = *(p.pmsProductLadderDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductLadder) updateTableName(table string) *pmsProductLadder {
	p.ALL = field.NewField(table, "*")
	p.ID = field.NewInt64(table, "id")
	p.ProductID = field.NewInt64(table, "product_id")
	p.Count_ = field.NewInt32(table, "count")
	p.Discount = field.NewFloat64(table, "discount")
	p.Price = field.NewFloat64(table, "price")

	p.fillFieldMap()

	return p
}

func (p *pmsProductLadder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductLadder) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["count"] = p.Count_
	p.fieldMap["discount"] = p.Discount
	p.fieldMap["price"] = p.Price
}

func (p pmsProductLadder) clone(db *gorm.DB) pmsProductLadder {
	p.pmsProductLadderDo.ReplaceDB(db)
	return p
}

type pmsProductLadderDo struct{ gen.DO }

func (p pmsProductLadderDo) Debug() *pmsProductLadderDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductLadderDo) WithContext(ctx context.Context) *pmsProductLadderDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductLadderDo) ReadDB() *pmsProductLadderDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductLadderDo) WriteDB() *pmsProductLadderDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductLadderDo) Clauses(conds ...clause.Expression) *pmsProductLadderDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductLadderDo) Returning(value interface{}, columns ...string) *pmsProductLadderDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductLadderDo) Not(conds ...gen.Condition) *pmsProductLadderDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductLadderDo) Or(conds ...gen.Condition) *pmsProductLadderDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductLadderDo) Select(conds ...field.Expr) *pmsProductLadderDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductLadderDo) Where(conds ...gen.Condition) *pmsProductLadderDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductLadderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pmsProductLadderDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pmsProductLadderDo) Order(conds ...field.Expr) *pmsProductLadderDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductLadderDo) Distinct(cols ...field.Expr) *pmsProductLadderDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductLadderDo) Omit(cols ...field.Expr) *pmsProductLadderDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductLadderDo) Join(table schema.Tabler, on ...field.Expr) *pmsProductLadderDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductLadderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pmsProductLadderDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductLadderDo) RightJoin(table schema.Tabler, on ...field.Expr) *pmsProductLadderDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductLadderDo) Group(cols ...field.Expr) *pmsProductLadderDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductLadderDo) Having(conds ...gen.Condition) *pmsProductLadderDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductLadderDo) Limit(limit int) *pmsProductLadderDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductLadderDo) Offset(offset int) *pmsProductLadderDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductLadderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pmsProductLadderDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductLadderDo) Unscoped() *pmsProductLadderDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductLadderDo) Create(values ...*model.PmsProductLadder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductLadderDo) CreateInBatches(values []*model.PmsProductLadder, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductLadderDo) Save(values ...*model.PmsProductLadder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductLadderDo) First() (*model.PmsProductLadder, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) Take() (*model.PmsProductLadder, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) Last() (*model.PmsProductLadder, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) Find() ([]*model.PmsProductLadder, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductLadder), err
}

func (p pmsProductLadderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductLadder, err error) {
	buf := make([]*model.PmsProductLadder, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductLadderDo) FindInBatches(result *[]*model.PmsProductLadder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductLadderDo) Attrs(attrs ...field.AssignExpr) *pmsProductLadderDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductLadderDo) Assign(attrs ...field.AssignExpr) *pmsProductLadderDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductLadderDo) Joins(fields ...field.RelationField) *pmsProductLadderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductLadderDo) Preload(fields ...field.RelationField) *pmsProductLadderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductLadderDo) FirstOrInit() (*model.PmsProductLadder, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) FirstOrCreate() (*model.PmsProductLadder, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductLadder), nil
	}
}

func (p pmsProductLadderDo) FindByPage(offset int, limit int) (result []*model.PmsProductLadder, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductLadderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductLadderDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductLadderDo) Delete(models ...*model.PmsProductLadder) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductLadderDo) withDO(do gen.Dao) *pmsProductLadderDo {
	p.DO = *do.(*gen.DO)
	return p
}
