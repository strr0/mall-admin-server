// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q                                   = new(Query)
	PmsBrand                            *pmsBrand
	PmsMemberPrice                      *pmsMemberPrice
	PmsProduct                          *pmsProduct
	PmsProductAttribute                 *pmsProductAttribute
	PmsProductAttributeCategory         *pmsProductAttributeCategory
	PmsProductAttributeValue            *pmsProductAttributeValue
	PmsProductCategory                  *pmsProductCategory
	PmsProductCategoryAttributeRelation *pmsProductCategoryAttributeRelation
	PmsProductFullReduction             *pmsProductFullReduction
	PmsProductLadder                    *pmsProductLadder
	PmsProductVertifyRecord             *pmsProductVertifyRecord
	PmsSkuStock                         *pmsSkuStock
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	PmsBrand = &Q.PmsBrand
	PmsMemberPrice = &Q.PmsMemberPrice
	PmsProduct = &Q.PmsProduct
	PmsProductAttribute = &Q.PmsProductAttribute
	PmsProductAttributeCategory = &Q.PmsProductAttributeCategory
	PmsProductAttributeValue = &Q.PmsProductAttributeValue
	PmsProductCategory = &Q.PmsProductCategory
	PmsProductCategoryAttributeRelation = &Q.PmsProductCategoryAttributeRelation
	PmsProductFullReduction = &Q.PmsProductFullReduction
	PmsProductLadder = &Q.PmsProductLadder
	PmsProductVertifyRecord = &Q.PmsProductVertifyRecord
	PmsSkuStock = &Q.PmsSkuStock
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                                  db,
		PmsBrand:                            newPmsBrand(db),
		PmsMemberPrice:                      newPmsMemberPrice(db),
		PmsProduct:                          newPmsProduct(db),
		PmsProductAttribute:                 newPmsProductAttribute(db),
		PmsProductAttributeCategory:         newPmsProductAttributeCategory(db),
		PmsProductAttributeValue:            newPmsProductAttributeValue(db),
		PmsProductCategory:                  newPmsProductCategory(db),
		PmsProductCategoryAttributeRelation: newPmsProductCategoryAttributeRelation(db),
		PmsProductFullReduction:             newPmsProductFullReduction(db),
		PmsProductLadder:                    newPmsProductLadder(db),
		PmsProductVertifyRecord:             newPmsProductVertifyRecord(db),
		PmsSkuStock:                         newPmsSkuStock(db),
	}
}

type Query struct {
	db *gorm.DB

	PmsBrand                            pmsBrand
	PmsMemberPrice                      pmsMemberPrice
	PmsProduct                          pmsProduct
	PmsProductAttribute                 pmsProductAttribute
	PmsProductAttributeCategory         pmsProductAttributeCategory
	PmsProductAttributeValue            pmsProductAttributeValue
	PmsProductCategory                  pmsProductCategory
	PmsProductCategoryAttributeRelation pmsProductCategoryAttributeRelation
	PmsProductFullReduction             pmsProductFullReduction
	PmsProductLadder                    pmsProductLadder
	PmsProductVertifyRecord             pmsProductVertifyRecord
	PmsSkuStock                         pmsSkuStock
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                                  db,
		PmsBrand:                            q.PmsBrand.clone(db),
		PmsMemberPrice:                      q.PmsMemberPrice.clone(db),
		PmsProduct:                          q.PmsProduct.clone(db),
		PmsProductAttribute:                 q.PmsProductAttribute.clone(db),
		PmsProductAttributeCategory:         q.PmsProductAttributeCategory.clone(db),
		PmsProductAttributeValue:            q.PmsProductAttributeValue.clone(db),
		PmsProductCategory:                  q.PmsProductCategory.clone(db),
		PmsProductCategoryAttributeRelation: q.PmsProductCategoryAttributeRelation.clone(db),
		PmsProductFullReduction:             q.PmsProductFullReduction.clone(db),
		PmsProductLadder:                    q.PmsProductLadder.clone(db),
		PmsProductVertifyRecord:             q.PmsProductVertifyRecord.clone(db),
		PmsSkuStock:                         q.PmsSkuStock.clone(db),
	}
}

type queryCtx struct {
	PmsBrand                            *pmsBrandDo
	PmsMemberPrice                      *pmsMemberPriceDo
	PmsProduct                          *pmsProductDo
	PmsProductAttribute                 *pmsProductAttributeDo
	PmsProductAttributeCategory         *pmsProductAttributeCategoryDo
	PmsProductAttributeValue            *pmsProductAttributeValueDo
	PmsProductCategory                  *pmsProductCategoryDo
	PmsProductCategoryAttributeRelation *pmsProductCategoryAttributeRelationDo
	PmsProductFullReduction             *pmsProductFullReductionDo
	PmsProductLadder                    *pmsProductLadderDo
	PmsProductVertifyRecord             *pmsProductVertifyRecordDo
	PmsSkuStock                         *pmsSkuStockDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		PmsBrand:                            q.PmsBrand.WithContext(ctx),
		PmsMemberPrice:                      q.PmsMemberPrice.WithContext(ctx),
		PmsProduct:                          q.PmsProduct.WithContext(ctx),
		PmsProductAttribute:                 q.PmsProductAttribute.WithContext(ctx),
		PmsProductAttributeCategory:         q.PmsProductAttributeCategory.WithContext(ctx),
		PmsProductAttributeValue:            q.PmsProductAttributeValue.WithContext(ctx),
		PmsProductCategory:                  q.PmsProductCategory.WithContext(ctx),
		PmsProductCategoryAttributeRelation: q.PmsProductCategoryAttributeRelation.WithContext(ctx),
		PmsProductFullReduction:             q.PmsProductFullReduction.WithContext(ctx),
		PmsProductLadder:                    q.PmsProductLadder.WithContext(ctx),
		PmsProductVertifyRecord:             q.PmsProductVertifyRecord.WithContext(ctx),
		PmsSkuStock:                         q.PmsSkuStock.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
