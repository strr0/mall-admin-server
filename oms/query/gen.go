// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q                      = new(Query)
	OmsCompanyAddress      *omsCompanyAddress
	OmsOrder               *omsOrder
	OmsOrderItem           *omsOrderItem
	OmsOrderOperateHistory *omsOrderOperateHistory
	OmsOrderReturnApply    *omsOrderReturnApply
	OmsOrderReturnReason   *omsOrderReturnReason
	OmsOrderSetting        *omsOrderSetting
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	OmsCompanyAddress = &Q.OmsCompanyAddress
	OmsOrder = &Q.OmsOrder
	OmsOrderItem = &Q.OmsOrderItem
	OmsOrderOperateHistory = &Q.OmsOrderOperateHistory
	OmsOrderReturnApply = &Q.OmsOrderReturnApply
	OmsOrderReturnReason = &Q.OmsOrderReturnReason
	OmsOrderSetting = &Q.OmsOrderSetting
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		OmsCompanyAddress:      newOmsCompanyAddress(db),
		OmsOrder:               newOmsOrder(db),
		OmsOrderItem:           newOmsOrderItem(db),
		OmsOrderOperateHistory: newOmsOrderOperateHistory(db),
		OmsOrderReturnApply:    newOmsOrderReturnApply(db),
		OmsOrderReturnReason:   newOmsOrderReturnReason(db),
		OmsOrderSetting:        newOmsOrderSetting(db),
	}
}

type Query struct {
	db *gorm.DB

	OmsCompanyAddress      omsCompanyAddress
	OmsOrder               omsOrder
	OmsOrderItem           omsOrderItem
	OmsOrderOperateHistory omsOrderOperateHistory
	OmsOrderReturnApply    omsOrderReturnApply
	OmsOrderReturnReason   omsOrderReturnReason
	OmsOrderSetting        omsOrderSetting
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		OmsCompanyAddress:      q.OmsCompanyAddress.clone(db),
		OmsOrder:               q.OmsOrder.clone(db),
		OmsOrderItem:           q.OmsOrderItem.clone(db),
		OmsOrderOperateHistory: q.OmsOrderOperateHistory.clone(db),
		OmsOrderReturnApply:    q.OmsOrderReturnApply.clone(db),
		OmsOrderReturnReason:   q.OmsOrderReturnReason.clone(db),
		OmsOrderSetting:        q.OmsOrderSetting.clone(db),
	}
}

type queryCtx struct {
	OmsCompanyAddress      *omsCompanyAddressDo
	OmsOrder               *omsOrderDo
	OmsOrderItem           *omsOrderItemDo
	OmsOrderOperateHistory *omsOrderOperateHistoryDo
	OmsOrderReturnApply    *omsOrderReturnApplyDo
	OmsOrderReturnReason   *omsOrderReturnReasonDo
	OmsOrderSetting        *omsOrderSettingDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		OmsCompanyAddress:      q.OmsCompanyAddress.WithContext(ctx),
		OmsOrder:               q.OmsOrder.WithContext(ctx),
		OmsOrderItem:           q.OmsOrderItem.WithContext(ctx),
		OmsOrderOperateHistory: q.OmsOrderOperateHistory.WithContext(ctx),
		OmsOrderReturnApply:    q.OmsOrderReturnApply.WithContext(ctx),
		OmsOrderReturnReason:   q.OmsOrderReturnReason.WithContext(ctx),
		OmsOrderSetting:        q.OmsOrderSetting.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
