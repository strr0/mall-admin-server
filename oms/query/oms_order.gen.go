// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/oms/model"
)

func newOmsOrder(db *gorm.DB) omsOrder {
	_omsOrder := omsOrder{}

	_omsOrder.omsOrderDo.UseDB(db)
	_omsOrder.omsOrderDo.UseModel(&model.OmsOrder{})

	tableName := _omsOrder.omsOrderDo.TableName()
	_omsOrder.ALL = field.NewField(tableName, "*")
	_omsOrder.ID = field.NewInt64(tableName, "id")
	_omsOrder.MemberID = field.NewInt64(tableName, "member_id")
	_omsOrder.CouponID = field.NewInt64(tableName, "coupon_id")
	_omsOrder.OrderSn = field.NewString(tableName, "order_sn")
	_omsOrder.CreateTime = field.NewTime(tableName, "create_time")
	_omsOrder.MemberUsername = field.NewString(tableName, "member_username")
	_omsOrder.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_omsOrder.PayAmount = field.NewFloat64(tableName, "pay_amount")
	_omsOrder.FreightAmount = field.NewFloat64(tableName, "freight_amount")
	_omsOrder.PromotionAmount = field.NewFloat64(tableName, "promotion_amount")
	_omsOrder.IntegrationAmount = field.NewFloat64(tableName, "integration_amount")
	_omsOrder.CouponAmount = field.NewFloat64(tableName, "coupon_amount")
	_omsOrder.DiscountAmount = field.NewFloat64(tableName, "discount_amount")
	_omsOrder.PayType = field.NewInt32(tableName, "pay_type")
	_omsOrder.SourceType = field.NewInt32(tableName, "source_type")
	_omsOrder.Status = field.NewInt32(tableName, "status")
	_omsOrder.OrderType = field.NewInt32(tableName, "order_type")
	_omsOrder.DeliveryCompany = field.NewString(tableName, "delivery_company")
	_omsOrder.DeliverySn = field.NewString(tableName, "delivery_sn")
	_omsOrder.AutoConfirmDay = field.NewInt32(tableName, "auto_confirm_day")
	_omsOrder.Integration = field.NewInt32(tableName, "integration")
	_omsOrder.Growth = field.NewInt32(tableName, "growth")
	_omsOrder.PromotionInfo = field.NewString(tableName, "promotion_info")
	_omsOrder.BillType = field.NewInt32(tableName, "bill_type")
	_omsOrder.BillHeader = field.NewString(tableName, "bill_header")
	_omsOrder.BillContent = field.NewString(tableName, "bill_content")
	_omsOrder.BillReceiverPhone = field.NewString(tableName, "bill_receiver_phone")
	_omsOrder.BillReceiverEmail = field.NewString(tableName, "bill_receiver_email")
	_omsOrder.ReceiverName = field.NewString(tableName, "receiver_name")
	_omsOrder.ReceiverPhone = field.NewString(tableName, "receiver_phone")
	_omsOrder.ReceiverPostCode = field.NewString(tableName, "receiver_post_code")
	_omsOrder.ReceiverProvince = field.NewString(tableName, "receiver_province")
	_omsOrder.ReceiverCity = field.NewString(tableName, "receiver_city")
	_omsOrder.ReceiverRegion = field.NewString(tableName, "receiver_region")
	_omsOrder.ReceiverDetailAddress = field.NewString(tableName, "receiver_detail_address")
	_omsOrder.Note = field.NewString(tableName, "note")
	_omsOrder.ConfirmStatus = field.NewInt32(tableName, "confirm_status")
	_omsOrder.DeleteStatus = field.NewInt32(tableName, "delete_status")
	_omsOrder.UseIntegration = field.NewInt32(tableName, "use_integration")
	_omsOrder.PaymentTime = field.NewTime(tableName, "payment_time")
	_omsOrder.DeliveryTime = field.NewTime(tableName, "delivery_time")
	_omsOrder.ReceiveTime = field.NewTime(tableName, "receive_time")
	_omsOrder.CommentTime = field.NewTime(tableName, "comment_time")
	_omsOrder.ModifyTime = field.NewTime(tableName, "modify_time")

	_omsOrder.fillFieldMap()

	return _omsOrder
}

type omsOrder struct {
	omsOrderDo

	ALL                   field.Field
	ID                    field.Int64
	MemberID              field.Int64
	CouponID              field.Int64
	OrderSn               field.String
	CreateTime            field.Time
	MemberUsername        field.String
	TotalAmount           field.Float64
	PayAmount             field.Float64
	FreightAmount         field.Float64
	PromotionAmount       field.Float64
	IntegrationAmount     field.Float64
	CouponAmount          field.Float64
	DiscountAmount        field.Float64
	PayType               field.Int32
	SourceType            field.Int32
	Status                field.Int32
	OrderType             field.Int32
	DeliveryCompany       field.String
	DeliverySn            field.String
	AutoConfirmDay        field.Int32
	Integration           field.Int32
	Growth                field.Int32
	PromotionInfo         field.String
	BillType              field.Int32
	BillHeader            field.String
	BillContent           field.String
	BillReceiverPhone     field.String
	BillReceiverEmail     field.String
	ReceiverName          field.String
	ReceiverPhone         field.String
	ReceiverPostCode      field.String
	ReceiverProvince      field.String
	ReceiverCity          field.String
	ReceiverRegion        field.String
	ReceiverDetailAddress field.String
	Note                  field.String
	ConfirmStatus         field.Int32
	DeleteStatus          field.Int32
	UseIntegration        field.Int32
	PaymentTime           field.Time
	DeliveryTime          field.Time
	ReceiveTime           field.Time
	CommentTime           field.Time
	ModifyTime            field.Time

	fieldMap map[string]field.Expr
}

func (o omsOrder) Table(newTableName string) *omsOrder {
	o.omsOrderDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrder) As(alias string) *omsOrder {
	o.omsOrderDo.DO = *(o.omsOrderDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrder) updateTableName(table string) *omsOrder {
	o.ALL = field.NewField(table, "*")
	o.ID = field.NewInt64(table, "id")
	o.MemberID = field.NewInt64(table, "member_id")
	o.CouponID = field.NewInt64(table, "coupon_id")
	o.OrderSn = field.NewString(table, "order_sn")
	o.CreateTime = field.NewTime(table, "create_time")
	o.MemberUsername = field.NewString(table, "member_username")
	o.TotalAmount = field.NewFloat64(table, "total_amount")
	o.PayAmount = field.NewFloat64(table, "pay_amount")
	o.FreightAmount = field.NewFloat64(table, "freight_amount")
	o.PromotionAmount = field.NewFloat64(table, "promotion_amount")
	o.IntegrationAmount = field.NewFloat64(table, "integration_amount")
	o.CouponAmount = field.NewFloat64(table, "coupon_amount")
	o.DiscountAmount = field.NewFloat64(table, "discount_amount")
	o.PayType = field.NewInt32(table, "pay_type")
	o.SourceType = field.NewInt32(table, "source_type")
	o.Status = field.NewInt32(table, "status")
	o.OrderType = field.NewInt32(table, "order_type")
	o.DeliveryCompany = field.NewString(table, "delivery_company")
	o.DeliverySn = field.NewString(table, "delivery_sn")
	o.AutoConfirmDay = field.NewInt32(table, "auto_confirm_day")
	o.Integration = field.NewInt32(table, "integration")
	o.Growth = field.NewInt32(table, "growth")
	o.PromotionInfo = field.NewString(table, "promotion_info")
	o.BillType = field.NewInt32(table, "bill_type")
	o.BillHeader = field.NewString(table, "bill_header")
	o.BillContent = field.NewString(table, "bill_content")
	o.BillReceiverPhone = field.NewString(table, "bill_receiver_phone")
	o.BillReceiverEmail = field.NewString(table, "bill_receiver_email")
	o.ReceiverName = field.NewString(table, "receiver_name")
	o.ReceiverPhone = field.NewString(table, "receiver_phone")
	o.ReceiverPostCode = field.NewString(table, "receiver_post_code")
	o.ReceiverProvince = field.NewString(table, "receiver_province")
	o.ReceiverCity = field.NewString(table, "receiver_city")
	o.ReceiverRegion = field.NewString(table, "receiver_region")
	o.ReceiverDetailAddress = field.NewString(table, "receiver_detail_address")
	o.Note = field.NewString(table, "note")
	o.ConfirmStatus = field.NewInt32(table, "confirm_status")
	o.DeleteStatus = field.NewInt32(table, "delete_status")
	o.UseIntegration = field.NewInt32(table, "use_integration")
	o.PaymentTime = field.NewTime(table, "payment_time")
	o.DeliveryTime = field.NewTime(table, "delivery_time")
	o.ReceiveTime = field.NewTime(table, "receive_time")
	o.CommentTime = field.NewTime(table, "comment_time")
	o.ModifyTime = field.NewTime(table, "modify_time")

	o.fillFieldMap()

	return o
}

func (o *omsOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrder) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 44)
	o.fieldMap["id"] = o.ID
	o.fieldMap["member_id"] = o.MemberID
	o.fieldMap["coupon_id"] = o.CouponID
	o.fieldMap["order_sn"] = o.OrderSn
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["member_username"] = o.MemberUsername
	o.fieldMap["total_amount"] = o.TotalAmount
	o.fieldMap["pay_amount"] = o.PayAmount
	o.fieldMap["freight_amount"] = o.FreightAmount
	o.fieldMap["promotion_amount"] = o.PromotionAmount
	o.fieldMap["integration_amount"] = o.IntegrationAmount
	o.fieldMap["coupon_amount"] = o.CouponAmount
	o.fieldMap["discount_amount"] = o.DiscountAmount
	o.fieldMap["pay_type"] = o.PayType
	o.fieldMap["source_type"] = o.SourceType
	o.fieldMap["status"] = o.Status
	o.fieldMap["order_type"] = o.OrderType
	o.fieldMap["delivery_company"] = o.DeliveryCompany
	o.fieldMap["delivery_sn"] = o.DeliverySn
	o.fieldMap["auto_confirm_day"] = o.AutoConfirmDay
	o.fieldMap["integration"] = o.Integration
	o.fieldMap["growth"] = o.Growth
	o.fieldMap["promotion_info"] = o.PromotionInfo
	o.fieldMap["bill_type"] = o.BillType
	o.fieldMap["bill_header"] = o.BillHeader
	o.fieldMap["bill_content"] = o.BillContent
	o.fieldMap["bill_receiver_phone"] = o.BillReceiverPhone
	o.fieldMap["bill_receiver_email"] = o.BillReceiverEmail
	o.fieldMap["receiver_name"] = o.ReceiverName
	o.fieldMap["receiver_phone"] = o.ReceiverPhone
	o.fieldMap["receiver_post_code"] = o.ReceiverPostCode
	o.fieldMap["receiver_province"] = o.ReceiverProvince
	o.fieldMap["receiver_city"] = o.ReceiverCity
	o.fieldMap["receiver_region"] = o.ReceiverRegion
	o.fieldMap["receiver_detail_address"] = o.ReceiverDetailAddress
	o.fieldMap["note"] = o.Note
	o.fieldMap["confirm_status"] = o.ConfirmStatus
	o.fieldMap["delete_status"] = o.DeleteStatus
	o.fieldMap["use_integration"] = o.UseIntegration
	o.fieldMap["payment_time"] = o.PaymentTime
	o.fieldMap["delivery_time"] = o.DeliveryTime
	o.fieldMap["receive_time"] = o.ReceiveTime
	o.fieldMap["comment_time"] = o.CommentTime
	o.fieldMap["modify_time"] = o.ModifyTime
}

func (o omsOrder) clone(db *gorm.DB) omsOrder {
	o.omsOrderDo.ReplaceDB(db)
	return o
}

type omsOrderDo struct{ gen.DO }

func (o omsOrderDo) Debug() *omsOrderDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderDo) WithContext(ctx context.Context) *omsOrderDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderDo) ReadDB() *omsOrderDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderDo) WriteDB() *omsOrderDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderDo) Clauses(conds ...clause.Expression) *omsOrderDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderDo) Returning(value interface{}, columns ...string) *omsOrderDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderDo) Not(conds ...gen.Condition) *omsOrderDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderDo) Or(conds ...gen.Condition) *omsOrderDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderDo) Select(conds ...field.Expr) *omsOrderDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderDo) Where(conds ...gen.Condition) *omsOrderDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *omsOrderDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o omsOrderDo) Order(conds ...field.Expr) *omsOrderDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderDo) Distinct(cols ...field.Expr) *omsOrderDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderDo) Omit(cols ...field.Expr) *omsOrderDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderDo) Join(table schema.Tabler, on ...field.Expr) *omsOrderDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *omsOrderDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) *omsOrderDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderDo) Group(cols ...field.Expr) *omsOrderDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderDo) Having(conds ...gen.Condition) *omsOrderDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderDo) Limit(limit int) *omsOrderDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderDo) Offset(offset int) *omsOrderDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *omsOrderDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderDo) Unscoped() *omsOrderDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderDo) Create(values ...*model.OmsOrder) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderDo) CreateInBatches(values []*model.OmsOrder, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderDo) Save(values ...*model.OmsOrder) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderDo) First() (*model.OmsOrder, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) Take() (*model.OmsOrder, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) Last() (*model.OmsOrder, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) Find() ([]*model.OmsOrder, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrder), err
}

func (o omsOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrder, err error) {
	buf := make([]*model.OmsOrder, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderDo) FindInBatches(result *[]*model.OmsOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderDo) Attrs(attrs ...field.AssignExpr) *omsOrderDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderDo) Assign(attrs ...field.AssignExpr) *omsOrderDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderDo) Joins(fields ...field.RelationField) *omsOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderDo) Preload(fields ...field.RelationField) *omsOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderDo) FirstOrInit() (*model.OmsOrder, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) FirstOrCreate() (*model.OmsOrder, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrder), nil
	}
}

func (o omsOrderDo) FindByPage(offset int, limit int) (result []*model.OmsOrder, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderDo) Delete(models ...*model.OmsOrder) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderDo) withDO(do gen.Dao) *omsOrderDo {
	o.DO = *do.(*gen.DO)
	return o
}
