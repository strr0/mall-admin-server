// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mall-admin-server/oms/model"
)

func newOmsCompanyAddress(db *gorm.DB) omsCompanyAddress {
	_omsCompanyAddress := omsCompanyAddress{}

	_omsCompanyAddress.omsCompanyAddressDo.UseDB(db)
	_omsCompanyAddress.omsCompanyAddressDo.UseModel(&model.OmsCompanyAddress{})

	tableName := _omsCompanyAddress.omsCompanyAddressDo.TableName()
	_omsCompanyAddress.ALL = field.NewField(tableName, "*")
	_omsCompanyAddress.ID = field.NewInt64(tableName, "id")
	_omsCompanyAddress.AddressName = field.NewString(tableName, "address_name")
	_omsCompanyAddress.SendStatus = field.NewInt32(tableName, "send_status")
	_omsCompanyAddress.ReceiveStatus = field.NewInt32(tableName, "receive_status")
	_omsCompanyAddress.Name = field.NewString(tableName, "name")
	_omsCompanyAddress.Phone = field.NewString(tableName, "phone")
	_omsCompanyAddress.Province = field.NewString(tableName, "province")
	_omsCompanyAddress.City = field.NewString(tableName, "city")
	_omsCompanyAddress.Region = field.NewString(tableName, "region")
	_omsCompanyAddress.DetailAddress = field.NewString(tableName, "detail_address")

	_omsCompanyAddress.fillFieldMap()

	return _omsCompanyAddress
}

type omsCompanyAddress struct {
	omsCompanyAddressDo

	ALL           field.Field
	ID            field.Int64
	AddressName   field.String
	SendStatus    field.Int32
	ReceiveStatus field.Int32
	Name          field.String
	Phone         field.String
	Province      field.String
	City          field.String
	Region        field.String
	DetailAddress field.String

	fieldMap map[string]field.Expr
}

func (o omsCompanyAddress) Table(newTableName string) *omsCompanyAddress {
	o.omsCompanyAddressDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsCompanyAddress) As(alias string) *omsCompanyAddress {
	o.omsCompanyAddressDo.DO = *(o.omsCompanyAddressDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsCompanyAddress) updateTableName(table string) *omsCompanyAddress {
	o.ALL = field.NewField(table, "*")
	o.ID = field.NewInt64(table, "id")
	o.AddressName = field.NewString(table, "address_name")
	o.SendStatus = field.NewInt32(table, "send_status")
	o.ReceiveStatus = field.NewInt32(table, "receive_status")
	o.Name = field.NewString(table, "name")
	o.Phone = field.NewString(table, "phone")
	o.Province = field.NewString(table, "province")
	o.City = field.NewString(table, "city")
	o.Region = field.NewString(table, "region")
	o.DetailAddress = field.NewString(table, "detail_address")

	o.fillFieldMap()

	return o
}

func (o *omsCompanyAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsCompanyAddress) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 10)
	o.fieldMap["id"] = o.ID
	o.fieldMap["address_name"] = o.AddressName
	o.fieldMap["send_status"] = o.SendStatus
	o.fieldMap["receive_status"] = o.ReceiveStatus
	o.fieldMap["name"] = o.Name
	o.fieldMap["phone"] = o.Phone
	o.fieldMap["province"] = o.Province
	o.fieldMap["city"] = o.City
	o.fieldMap["region"] = o.Region
	o.fieldMap["detail_address"] = o.DetailAddress
}

func (o omsCompanyAddress) clone(db *gorm.DB) omsCompanyAddress {
	o.omsCompanyAddressDo.ReplaceDB(db)
	return o
}

type omsCompanyAddressDo struct{ gen.DO }

func (o omsCompanyAddressDo) Debug() *omsCompanyAddressDo {
	return o.withDO(o.DO.Debug())
}

func (o omsCompanyAddressDo) WithContext(ctx context.Context) *omsCompanyAddressDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsCompanyAddressDo) ReadDB() *omsCompanyAddressDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsCompanyAddressDo) WriteDB() *omsCompanyAddressDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsCompanyAddressDo) Clauses(conds ...clause.Expression) *omsCompanyAddressDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsCompanyAddressDo) Returning(value interface{}, columns ...string) *omsCompanyAddressDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsCompanyAddressDo) Not(conds ...gen.Condition) *omsCompanyAddressDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsCompanyAddressDo) Or(conds ...gen.Condition) *omsCompanyAddressDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsCompanyAddressDo) Select(conds ...field.Expr) *omsCompanyAddressDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsCompanyAddressDo) Where(conds ...gen.Condition) *omsCompanyAddressDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsCompanyAddressDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *omsCompanyAddressDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o omsCompanyAddressDo) Order(conds ...field.Expr) *omsCompanyAddressDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsCompanyAddressDo) Distinct(cols ...field.Expr) *omsCompanyAddressDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsCompanyAddressDo) Omit(cols ...field.Expr) *omsCompanyAddressDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsCompanyAddressDo) Join(table schema.Tabler, on ...field.Expr) *omsCompanyAddressDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsCompanyAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) *omsCompanyAddressDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsCompanyAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) *omsCompanyAddressDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsCompanyAddressDo) Group(cols ...field.Expr) *omsCompanyAddressDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsCompanyAddressDo) Having(conds ...gen.Condition) *omsCompanyAddressDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsCompanyAddressDo) Limit(limit int) *omsCompanyAddressDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsCompanyAddressDo) Offset(offset int) *omsCompanyAddressDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsCompanyAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *omsCompanyAddressDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsCompanyAddressDo) Unscoped() *omsCompanyAddressDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsCompanyAddressDo) Create(values ...*model.OmsCompanyAddress) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsCompanyAddressDo) CreateInBatches(values []*model.OmsCompanyAddress, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsCompanyAddressDo) Save(values ...*model.OmsCompanyAddress) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsCompanyAddressDo) First() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) Take() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) Last() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) Find() ([]*model.OmsCompanyAddress, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsCompanyAddress), err
}

func (o omsCompanyAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsCompanyAddress, err error) {
	buf := make([]*model.OmsCompanyAddress, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsCompanyAddressDo) FindInBatches(result *[]*model.OmsCompanyAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsCompanyAddressDo) Attrs(attrs ...field.AssignExpr) *omsCompanyAddressDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsCompanyAddressDo) Assign(attrs ...field.AssignExpr) *omsCompanyAddressDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsCompanyAddressDo) Joins(fields ...field.RelationField) *omsCompanyAddressDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsCompanyAddressDo) Preload(fields ...field.RelationField) *omsCompanyAddressDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsCompanyAddressDo) FirstOrInit() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) FirstOrCreate() (*model.OmsCompanyAddress, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsCompanyAddress), nil
	}
}

func (o omsCompanyAddressDo) FindByPage(offset int, limit int) (result []*model.OmsCompanyAddress, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsCompanyAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsCompanyAddressDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsCompanyAddressDo) Delete(models ...*model.OmsCompanyAddress) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsCompanyAddressDo) withDO(do gen.Dao) *omsCompanyAddressDo {
	o.DO = *do.(*gen.DO)
	return o
}
