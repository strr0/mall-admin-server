// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q                               = new(Query)
	CmsPrefrenceArea                *cmsPrefrenceArea
	CmsPrefrenceAreaProductRelation *cmsPrefrenceAreaProductRelation
	CmsSubject                      *cmsSubject
	CmsSubjectProductRelation       *cmsSubjectProductRelation
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	CmsPrefrenceArea = &Q.CmsPrefrenceArea
	CmsPrefrenceAreaProductRelation = &Q.CmsPrefrenceAreaProductRelation
	CmsSubject = &Q.CmsSubject
	CmsSubjectProductRelation = &Q.CmsSubjectProductRelation
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                              db,
		CmsPrefrenceArea:                newCmsPrefrenceArea(db),
		CmsPrefrenceAreaProductRelation: newCmsPrefrenceAreaProductRelation(db),
		CmsSubject:                      newCmsSubject(db),
		CmsSubjectProductRelation:       newCmsSubjectProductRelation(db),
	}
}

type Query struct {
	db *gorm.DB

	CmsPrefrenceArea                cmsPrefrenceArea
	CmsPrefrenceAreaProductRelation cmsPrefrenceAreaProductRelation
	CmsSubject                      cmsSubject
	CmsSubjectProductRelation       cmsSubjectProductRelation
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                              db,
		CmsPrefrenceArea:                q.CmsPrefrenceArea.clone(db),
		CmsPrefrenceAreaProductRelation: q.CmsPrefrenceAreaProductRelation.clone(db),
		CmsSubject:                      q.CmsSubject.clone(db),
		CmsSubjectProductRelation:       q.CmsSubjectProductRelation.clone(db),
	}
}

type queryCtx struct {
	CmsPrefrenceArea                *cmsPrefrenceAreaDo
	CmsPrefrenceAreaProductRelation *cmsPrefrenceAreaProductRelationDo
	CmsSubject                      *cmsSubjectDo
	CmsSubjectProductRelation       *cmsSubjectProductRelationDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CmsPrefrenceArea:                q.CmsPrefrenceArea.WithContext(ctx),
		CmsPrefrenceAreaProductRelation: q.CmsPrefrenceAreaProductRelation.WithContext(ctx),
		CmsSubject:                      q.CmsSubject.WithContext(ctx),
		CmsSubjectProductRelation:       q.CmsSubjectProductRelation.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
